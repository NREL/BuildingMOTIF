"""Constrain dependencies to have no duplicates. Uses new JSON serialization/deserialization
(serde) to consistently store the dependency bindings.

Revision ID: 542bfbdef624
Revises: 66121a0432bc
Create Date: 2022-09-13 10:57:44.977492

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.orm import sessionmaker

from buildingmotif.database.tables import DepsAssociation

# revision identifiers, used by Alembic.
revision = "542bfbdef624"
down_revision = "66121a0432bc"
branch_labels = None
depends_on = None


def upgrade():
    # add NULLABLE 'id' column
    with op.batch_alter_table("deps_association_table", schema=None) as batch_op:
        batch_op.add_column(sa.Column("id", sa.Integer(), nullable=True))
        batch_op.create_primary_key("deps_association_pk", columns=["id"])
        batch_op.alter_column(
            existing_type=sa.INTEGER(),
            column_name="id",
            autoincrement=True,
            existing_autoincrement=True,
            nullable=False,
        )

        batch_op.alter_column(
            "dependant_id", existing_type=sa.INTEGER(), nullable=False
        )
        batch_op.alter_column("dependee_id", existing_type=sa.INTEGER(), nullable=False)
        batch_op.create_unique_constraint(
            "deps_association_unique_constraint",
            ["dependant_id", "dependee_id", "args"],
        )

    with op.batch_alter_table("template", schema=None) as batch_op:
        batch_op.drop_index("ix_template_name")

    # now that 'id' exists, update the serde of the deps field by copying all the deps
    # out and then putting them back in
    conn = op.get_bind()
    Session = sessionmaker()
    with Session(bind=conn) as session:
        deps = session.query(DepsAssociation).all()
        for dep in deps:
            args = dep.args.copy()
            dep.args = [(k, v) for k, v in args.items()]
            session.add(dep)
        session.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("template", schema=None) as batch_op:
        batch_op.create_index("ix_template_name", ["name"], unique=False)

    with op.batch_alter_table("deps_association_table", schema=None) as batch_op:
        batch_op.drop_constraint("deps_association_unique_constraint", type_="unique")
        batch_op.alter_column("dependee_id", existing_type=sa.INTEGER(), nullable=False)
        batch_op.alter_column(
            "dependant_id", existing_type=sa.INTEGER(), nullable=False
        )
        batch_op.drop_column("id")

    # ### end Alembic commands ###
